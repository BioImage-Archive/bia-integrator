# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class BIAStudy(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "organism",
            "release_date",
            "description",
            "id",
            "title",
        }
        
        class properties:
            id = schemas.StrSchema
            title = schemas.StrSchema
            description = schemas.StrSchema
            organism = schemas.StrSchema
            release_date = schemas.StrSchema
            
            
            class authors(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Author']:
                        return Author
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Author'], typing.List['Author']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'authors':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Author':
                    return super().__getitem__(i)
            imaging_type = schemas.StrSchema
            attributes = schemas.DictSchema
            example_image_uri = schemas.StrSchema
            
            
            class tags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tags':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            file_references_count = schemas.IntSchema
            images_count = schemas.IntSchema
            __annotations__ = {
                "id": id,
                "title": title,
                "description": description,
                "organism": organism,
                "release_date": release_date,
                "authors": authors,
                "imaging_type": imaging_type,
                "attributes": attributes,
                "example_image_uri": example_image_uri,
                "tags": tags,
                "file_references_count": file_references_count,
                "images_count": images_count,
            }
    
    organism: MetaOapg.properties.organism
    release_date: MetaOapg.properties.release_date
    description: MetaOapg.properties.description
    id: MetaOapg.properties.id
    title: MetaOapg.properties.title
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organism"]) -> MetaOapg.properties.organism: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["release_date"]) -> MetaOapg.properties.release_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authors"]) -> MetaOapg.properties.authors: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["imaging_type"]) -> MetaOapg.properties.imaging_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> MetaOapg.properties.attributes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["example_image_uri"]) -> MetaOapg.properties.example_image_uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["file_references_count"]) -> MetaOapg.properties.file_references_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["images_count"]) -> MetaOapg.properties.images_count: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "title", "description", "organism", "release_date", "authors", "imaging_type", "attributes", "example_image_uri", "tags", "file_references_count", "images_count", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organism"]) -> MetaOapg.properties.organism: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["release_date"]) -> MetaOapg.properties.release_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authors"]) -> typing.Union[MetaOapg.properties.authors, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["imaging_type"]) -> typing.Union[MetaOapg.properties.imaging_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union[MetaOapg.properties.attributes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["example_image_uri"]) -> typing.Union[MetaOapg.properties.example_image_uri, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union[MetaOapg.properties.tags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["file_references_count"]) -> typing.Union[MetaOapg.properties.file_references_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["images_count"]) -> typing.Union[MetaOapg.properties.images_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "title", "description", "organism", "release_date", "authors", "imaging_type", "attributes", "example_image_uri", "tags", "file_references_count", "images_count", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        organism: typing.Union[MetaOapg.properties.organism, str, ],
        release_date: typing.Union[MetaOapg.properties.release_date, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        authors: typing.Union[MetaOapg.properties.authors, list, tuple, schemas.Unset] = schemas.unset,
        imaging_type: typing.Union[MetaOapg.properties.imaging_type, str, schemas.Unset] = schemas.unset,
        attributes: typing.Union[MetaOapg.properties.attributes, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        example_image_uri: typing.Union[MetaOapg.properties.example_image_uri, str, schemas.Unset] = schemas.unset,
        tags: typing.Union[MetaOapg.properties.tags, list, tuple, schemas.Unset] = schemas.unset,
        file_references_count: typing.Union[MetaOapg.properties.file_references_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        images_count: typing.Union[MetaOapg.properties.images_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BIAStudy':
        return super().__new__(
            cls,
            *_args,
            organism=organism,
            release_date=release_date,
            description=description,
            id=id,
            title=title,
            authors=authors,
            imaging_type=imaging_type,
            attributes=attributes,
            example_image_uri=example_image_uri,
            tags=tags,
            file_references_count=file_references_count,
            images_count=images_count,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.author import Author
