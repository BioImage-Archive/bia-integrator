# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class BIAImageRepresentation(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A particular representation of a BIAImage. Examples:

* A single HTTP accessible file.
* Multiple HTTP accessible files, representing different channels, planes and time points.
* An S3 accessible OME-Zarr.
* A thumbnail.
    """


    class MetaOapg:
        required = {
            "accession_id",
            "size",
            "image_aliases",
            "uri",
        }
        
        class properties:
            accession_id = schemas.StrSchema
            
            
            class image_aliases(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['BIAImageAlias']:
                        return BIAImageAlias
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['BIAImageAlias'], typing.List['BIAImageAlias']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'image_aliases':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'BIAImageAlias':
                    return super().__getitem__(i)
            
            
            class uri(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    any_of_0 = schemas.StrSchema
                    
                    
                    class any_of_1(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            items = schemas.StrSchema
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'any_of_1':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    
                    @classmethod
                    @functools.lru_cache()
                    def any_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.any_of_0,
                            cls.any_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'uri':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            size = schemas.IntSchema
            type = schemas.StrSchema
            dimensions = schemas.StrSchema
            attributes = schemas.DictSchema
        
            @staticmethod
            def rendering() -> typing.Type['RenderingInfo']:
                return RenderingInfo
            __annotations__ = {
                "accession_id": accession_id,
                "image_aliases": image_aliases,
                "uri": uri,
                "size": size,
                "type": type,
                "dimensions": dimensions,
                "attributes": attributes,
                "rendering": rendering,
            }
    
    accession_id: MetaOapg.properties.accession_id
    size: MetaOapg.properties.size
    image_aliases: MetaOapg.properties.image_aliases
    uri: MetaOapg.properties.uri
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accession_id"]) -> MetaOapg.properties.accession_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_aliases"]) -> MetaOapg.properties.image_aliases: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["size"]) -> MetaOapg.properties.size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dimensions"]) -> MetaOapg.properties.dimensions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> MetaOapg.properties.attributes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rendering"]) -> 'RenderingInfo': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["accession_id", "image_aliases", "uri", "size", "type", "dimensions", "attributes", "rendering", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accession_id"]) -> MetaOapg.properties.accession_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_aliases"]) -> MetaOapg.properties.image_aliases: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["size"]) -> MetaOapg.properties.size: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dimensions"]) -> typing.Union[MetaOapg.properties.dimensions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union[MetaOapg.properties.attributes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rendering"]) -> typing.Union['RenderingInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accession_id", "image_aliases", "uri", "size", "type", "dimensions", "attributes", "rendering", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        accession_id: typing.Union[MetaOapg.properties.accession_id, str, ],
        size: typing.Union[MetaOapg.properties.size, decimal.Decimal, int, ],
        image_aliases: typing.Union[MetaOapg.properties.image_aliases, list, tuple, ],
        uri: typing.Union[MetaOapg.properties.uri, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        dimensions: typing.Union[MetaOapg.properties.dimensions, str, schemas.Unset] = schemas.unset,
        attributes: typing.Union[MetaOapg.properties.attributes, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        rendering: typing.Union['RenderingInfo', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BIAImageRepresentation':
        return super().__new__(
            cls,
            *_args,
            accession_id=accession_id,
            size=size,
            image_aliases=image_aliases,
            uri=uri,
            type=type,
            dimensions=dimensions,
            attributes=attributes,
            rendering=rendering,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.bia_image_alias import BIAImageAlias
from openapi_client.model.rendering_info import RenderingInfo
