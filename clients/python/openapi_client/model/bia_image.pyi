# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class BIAImage(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    This class represents the abstract concept of an image. Images are
generated by acquisition by instruments.

Examples:

* A single plane bright-field image of a bacterium.
* A confocal fluorescence image of cells, with two channels.
* A volume EM stack of a cell.

Images are distinct from their representation as files, since the same
image can be represented in different file formats and in some cases
different file structures.
    """


    class MetaOapg:
        required = {
            "accession_id",
            "id",
            "study_id",
            "original_relpath",
        }
        
        class properties:
            id = schemas.StrSchema
            study_id = schemas.StrSchema
            accession_id = schemas.StrSchema
            original_relpath = schemas.StrSchema
            name = schemas.StrSchema
            dimensions = schemas.StrSchema
            
            
            class representations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['BIAImageRepresentation']:
                        return BIAImageRepresentation
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['BIAImageRepresentation'], typing.List['BIAImageRepresentation']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'representations':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'BIAImageRepresentation':
                    return super().__getitem__(i)
            attributes = schemas.DictSchema
            __annotations__ = {
                "id": id,
                "study_id": study_id,
                "accession_id": accession_id,
                "original_relpath": original_relpath,
                "name": name,
                "dimensions": dimensions,
                "representations": representations,
                "attributes": attributes,
            }
    
    accession_id: MetaOapg.properties.accession_id
    id: MetaOapg.properties.id
    study_id: MetaOapg.properties.study_id
    original_relpath: MetaOapg.properties.original_relpath
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["study_id"]) -> MetaOapg.properties.study_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accession_id"]) -> MetaOapg.properties.accession_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["original_relpath"]) -> MetaOapg.properties.original_relpath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dimensions"]) -> MetaOapg.properties.dimensions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["representations"]) -> MetaOapg.properties.representations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> MetaOapg.properties.attributes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "study_id", "accession_id", "original_relpath", "name", "dimensions", "representations", "attributes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["study_id"]) -> MetaOapg.properties.study_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accession_id"]) -> MetaOapg.properties.accession_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["original_relpath"]) -> MetaOapg.properties.original_relpath: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dimensions"]) -> typing.Union[MetaOapg.properties.dimensions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["representations"]) -> typing.Union[MetaOapg.properties.representations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union[MetaOapg.properties.attributes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "study_id", "accession_id", "original_relpath", "name", "dimensions", "representations", "attributes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        accession_id: typing.Union[MetaOapg.properties.accession_id, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        study_id: typing.Union[MetaOapg.properties.study_id, str, ],
        original_relpath: typing.Union[MetaOapg.properties.original_relpath, str, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        dimensions: typing.Union[MetaOapg.properties.dimensions, str, schemas.Unset] = schemas.unset,
        representations: typing.Union[MetaOapg.properties.representations, list, tuple, schemas.Unset] = schemas.unset,
        attributes: typing.Union[MetaOapg.properties.attributes, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BIAImage':
        return super().__new__(
            cls,
            *_args,
            accession_id=accession_id,
            id=id,
            study_id=study_id,
            original_relpath=original_relpath,
            name=name,
            dimensions=dimensions,
            representations=representations,
            attributes=attributes,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.bia_image_representation import BIAImageRepresentation
