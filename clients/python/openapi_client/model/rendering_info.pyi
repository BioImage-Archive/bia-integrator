# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class RenderingInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "channel_renders",
        }
        
        class properties:
            
            
            class channel_renders(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ChannelRendering']:
                        return ChannelRendering
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ChannelRendering'], typing.List['ChannelRendering']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'channel_renders':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ChannelRendering':
                    return super().__getitem__(i)
            default_z = schemas.IntSchema
            default_t = schemas.IntSchema
            __annotations__ = {
                "channel_renders": channel_renders,
                "default_z": default_z,
                "default_t": default_t,
            }
    
    channel_renders: MetaOapg.properties.channel_renders
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel_renders"]) -> MetaOapg.properties.channel_renders: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_z"]) -> MetaOapg.properties.default_z: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_t"]) -> MetaOapg.properties.default_t: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["channel_renders", "default_z", "default_t", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel_renders"]) -> MetaOapg.properties.channel_renders: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_z"]) -> typing.Union[MetaOapg.properties.default_z, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_t"]) -> typing.Union[MetaOapg.properties.default_t, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["channel_renders", "default_z", "default_t", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        channel_renders: typing.Union[MetaOapg.properties.channel_renders, list, tuple, ],
        default_z: typing.Union[MetaOapg.properties.default_z, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        default_t: typing.Union[MetaOapg.properties.default_t, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RenderingInfo':
        return super().__new__(
            cls,
            *_args,
            channel_renders=channel_renders,
            default_z=default_z,
            default_t=default_t,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.channel_rendering import ChannelRendering
