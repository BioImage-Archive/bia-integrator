# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from openapi_client.models.model_metadata import ModelMetadata

class FileReference(BaseModel):
    """
    A reference to an externally hosted file.
    """
    id: Optional[StrictStr] = Field(None, alias="_id")
    uuid: StrictStr = Field(...)
    version: StrictInt = Field(...)
    model: ModelMetadata = Field(...)
    study_uuid: StrictStr = Field(...)
    name: StrictStr = Field(...)
    uri: StrictStr = Field(...)
    type: StrictStr = Field(...)
    size_bytes: StrictInt = Field(...)
    attributes: Optional[Dict[str, Any]] = None
    __properties = ["_id", "uuid", "version", "model", "study_uuid", "name", "uri", "type", "size_bytes", "attributes"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FileReference:
        """Create an instance of FileReference from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of model
        if self.model:
            _dict['model'] = self.model.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FileReference:
        """Create an instance of FileReference from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FileReference.parse_obj(obj)

        _obj = FileReference.parse_obj({
            "id": obj.get("_id"),
            "uuid": obj.get("uuid"),
            "version": obj.get("version"),
            "model": ModelMetadata.from_dict(obj.get("model")) if obj.get("model") is not None else None,
            "study_uuid": obj.get("study_uuid"),
            "name": obj.get("name"),
            "uri": obj.get("uri"),
            "type": obj.get("type"),
            "size_bytes": obj.get("size_bytes"),
            "attributes": obj.get("attributes")
        })
        return _obj

