# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel

class RenderingInfo(BaseModel):
    """
    RenderingInfo
    """
    channel_renders: Optional[Any] = None
    default_z: Optional[Any] = None
    default_t: Optional[Any] = None
    __properties = ["channel_renders", "default_z", "default_t"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RenderingInfo:
        """Create an instance of RenderingInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if channel_renders (nullable) is None
        # and __fields_set__ contains the field
        if self.channel_renders is None and "channel_renders" in self.__fields_set__:
            _dict['channel_renders'] = None

        # set to None if default_z (nullable) is None
        # and __fields_set__ contains the field
        if self.default_z is None and "default_z" in self.__fields_set__:
            _dict['default_z'] = None

        # set to None if default_t (nullable) is None
        # and __fields_set__ contains the field
        if self.default_t is None and "default_t" in self.__fields_set__:
            _dict['default_t'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RenderingInfo:
        """Create an instance of RenderingInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RenderingInfo.parse_obj(obj)

        _obj = RenderingInfo.parse_obj({
            "channel_renders": obj.get("channel_renders"),
            "default_z": obj.get("default_z"),
            "default_t": obj.get("default_t")
        })
        return _obj


