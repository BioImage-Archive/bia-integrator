# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr
from bia_integrator_api.models.model_metadata import ModelMetadata

class ObjectInfo(BaseModel):
    """
    ObjectInfo
    """
    uuid: StrictStr = Field(...)
    model: ModelMetadata = Field(...)
    __properties = ["uuid", "model"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ObjectInfo:
        """Create an instance of ObjectInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of model
        if self.model:
            _dict['model'] = self.model.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ObjectInfo:
        """Create an instance of ObjectInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ObjectInfo.parse_obj(obj)

        _obj = ObjectInfo.parse_obj({
            "uuid": obj.get("uuid"),
            "model": ModelMetadata.from_dict(obj.get("model")) if obj.get("model") is not None else None
        })
        return _obj


