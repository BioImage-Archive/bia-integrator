# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from bia_integrator_api.models.bia_image_alias import BIAImageAlias
from bia_integrator_api.models.bia_image_representation import BIAImageRepresentation
from bia_integrator_api.models.image_annotation import ImageAnnotation
from bia_integrator_api.models.model_metadata import ModelMetadata
from typing import Optional, Set
from typing_extensions import Self

class BIAImage(BaseModel):
    """
    This class represents the abstract concept of an image. Images are generated by acquisition by instruments.  Examples:  * A single plane bright-field image of a bacterium. * A confocal fluorescence image of cells, with two channels. * A volume EM stack of a cell.  Images are distinct from their representation as files, since the same image can be represented in different file formats and in some cases different file structures.
    """ # noqa: E501
    attributes: Optional[Dict[str, Any]] = Field(default=None, description="         When annotations are applied, the ones that have a key different than an object attribute (so they don't overwrite it) get saved here.     ")
    annotations_applied: Optional[StrictBool] = Field(default=False, description="         This acts as a dirty flag, with the purpose of telling apart objects that had some fields overwritten by applying annotations (so should be rejected when writing), and those that didn't.     ")
    annotations: Optional[List[ImageAnnotation]] = None
    context: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default='https://raw.githubusercontent.com/BioImage-Archive/bia-integrator/main/api/src/models/jsonld/1.0/ImageContext.jsonld', alias="@context")
    uuid: StrictStr
    version: StrictInt
    model: Optional[ModelMetadata] = None
    study_uuid: StrictStr
    original_relpath: StrictStr
    name: Optional[StrictStr] = None
    dimensions: Optional[StrictStr] = None
    representations: Optional[List[BIAImageRepresentation]] = None
    alias: Optional[BIAImageAlias] = None
    image_acquisitions_uuid: Optional[List[StrictStr]] = Field(default=None, description="Context in which the image was acquired.")
    __properties: ClassVar[List[str]] = ["attributes", "annotations_applied", "annotations", "@context", "uuid", "version", "model", "study_uuid", "original_relpath", "name", "dimensions", "representations", "alias", "image_acquisitions_uuid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BIAImage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in annotations (list)
        _items = []
        if self.annotations:
            for _item_annotations in self.annotations:
                if _item_annotations:
                    _items.append(_item_annotations.to_dict())
            _dict['annotations'] = _items
        # override the default output from pydantic by calling `to_dict()` of model
        if self.model:
            _dict['model'] = self.model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in representations (list)
        _items = []
        if self.representations:
            for _item_representations in self.representations:
                if _item_representations:
                    _items.append(_item_representations.to_dict())
            _dict['representations'] = _items
        # override the default output from pydantic by calling `to_dict()` of alias
        if self.alias:
            _dict['alias'] = self.alias.to_dict()
        # set to None if model (nullable) is None
        # and model_fields_set contains the field
        if self.model is None and "model" in self.model_fields_set:
            _dict['model'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if dimensions (nullable) is None
        # and model_fields_set contains the field
        if self.dimensions is None and "dimensions" in self.model_fields_set:
            _dict['dimensions'] = None

        # set to None if alias (nullable) is None
        # and model_fields_set contains the field
        if self.alias is None and "alias" in self.model_fields_set:
            _dict['alias'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BIAImage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributes": obj.get("attributes"),
            "annotations_applied": obj.get("annotations_applied") if obj.get("annotations_applied") is not None else False,
            "annotations": [ImageAnnotation.from_dict(_item) for _item in obj["annotations"]] if obj.get("annotations") is not None else None,
            "@context": obj.get("@context") if obj.get("@context") is not None else 'https://raw.githubusercontent.com/BioImage-Archive/bia-integrator/main/api/src/models/jsonld/1.0/ImageContext.jsonld',
            "uuid": obj.get("uuid"),
            "version": obj.get("version"),
            "model": ModelMetadata.from_dict(obj["model"]) if obj.get("model") is not None else None,
            "study_uuid": obj.get("study_uuid"),
            "original_relpath": obj.get("original_relpath"),
            "name": obj.get("name"),
            "dimensions": obj.get("dimensions"),
            "representations": [BIAImageRepresentation.from_dict(_item) for _item in obj["representations"]] if obj.get("representations") is not None else None,
            "alias": BIAImageAlias.from_dict(obj["alias"]) if obj.get("alias") is not None else None,
            "image_acquisitions_uuid": obj.get("image_acquisitions_uuid")
        })
        return _obj


