# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from bia_integrator_api.models.model_metadata import ModelMetadata

class Biosample(BaseModel):
    """
    Biosample
    """
    uuid: StrictStr = Field(...)
    version: StrictInt = Field(...)
    model: Optional[ModelMetadata] = None
    title: StrictStr = Field(...)
    organism_scientific_name: StrictStr = Field(...)
    organism_common_name: StrictStr = Field(...)
    organism_ncbi_taxon: StrictStr = Field(...)
    description: StrictStr = Field(...)
    biological_entity: StrictStr = Field(...)
    experimental_variable: Optional[StrictStr] = Field(...)
    extrinsic_variable: Optional[StrictStr] = Field(...)
    intrinsic_variable: Optional[StrictStr] = Field(...)
    __properties = ["uuid", "version", "model", "title", "organism_scientific_name", "organism_common_name", "organism_ncbi_taxon", "description", "biological_entity", "experimental_variable", "extrinsic_variable", "intrinsic_variable"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Biosample:
        """Create an instance of Biosample from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of model
        if self.model:
            _dict['model'] = self.model.to_dict()
        # set to None if model (nullable) is None
        # and __fields_set__ contains the field
        if self.model is None and "model" in self.__fields_set__:
            _dict['model'] = None

        # set to None if experimental_variable (nullable) is None
        # and __fields_set__ contains the field
        if self.experimental_variable is None and "experimental_variable" in self.__fields_set__:
            _dict['experimental_variable'] = None

        # set to None if extrinsic_variable (nullable) is None
        # and __fields_set__ contains the field
        if self.extrinsic_variable is None and "extrinsic_variable" in self.__fields_set__:
            _dict['extrinsic_variable'] = None

        # set to None if intrinsic_variable (nullable) is None
        # and __fields_set__ contains the field
        if self.intrinsic_variable is None and "intrinsic_variable" in self.__fields_set__:
            _dict['intrinsic_variable'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Biosample:
        """Create an instance of Biosample from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Biosample.parse_obj(obj)

        _obj = Biosample.parse_obj({
            "uuid": obj.get("uuid"),
            "version": obj.get("version"),
            "model": ModelMetadata.from_dict(obj.get("model")) if obj.get("model") is not None else None,
            "title": obj.get("title"),
            "organism_scientific_name": obj.get("organism_scientific_name"),
            "organism_common_name": obj.get("organism_common_name"),
            "organism_ncbi_taxon": obj.get("organism_ncbi_taxon"),
            "description": obj.get("description"),
            "biological_entity": obj.get("biological_entity"),
            "experimental_variable": obj.get("experimental_variable"),
            "extrinsic_variable": obj.get("extrinsic_variable"),
            "intrinsic_variable": obj.get("intrinsic_variable")
        })
        return _obj


