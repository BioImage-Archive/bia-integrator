# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from bia_integrator_api.models.attribute import Attribute
from bia_integrator_api.models.image_representation_use_type import ImageRepresentationUseType
from bia_integrator_api.models.model_metadata import ModelMetadata
from bia_integrator_api.models.rendered_view import RenderedView
from typing import Optional, Set
from typing_extensions import Self

class ImageRepresentation(BaseModel):
    """
    ImageRepresentation
    """ # noqa: E501
    uuid: StrictStr = Field(description="Unique ID (across the BIA database) used to refer to and identify a document.")
    version: Annotated[int, Field(strict=True, ge=0)] = Field(description="Document version. This can't be optional to make sure we never persist objects without it")
    model: Optional[ModelMetadata] = None
    image_format: StrictStr = Field(description="Image format of the combined files.")
    use_type: ImageRepresentationUseType
    file_uri: List[StrictStr] = Field(description="URI(s) of the file(s) which together make up this image representation.")
    total_size_in_bytes: StrictInt = Field(description="Combined disc size in bytes of all the files.")
    physical_size_x: Optional[Union[StrictFloat, StrictInt]] = None
    physical_size_y: Optional[Union[StrictFloat, StrictInt]] = None
    physical_size_z: Optional[Union[StrictFloat, StrictInt]] = None
    size_x: Optional[StrictInt] = None
    size_y: Optional[StrictInt] = None
    size_z: Optional[StrictInt] = None
    size_c: Optional[StrictInt] = None
    size_t: Optional[StrictInt] = None
    image_viewer_setting: Optional[List[RenderedView]] = None
    attribute: Optional[List[Attribute]] = None
    representation_of_uuid: StrictStr
    __properties: ClassVar[List[str]] = ["uuid", "version", "model", "image_format", "use_type", "file_uri", "total_size_in_bytes", "physical_size_x", "physical_size_y", "physical_size_z", "size_x", "size_y", "size_z", "size_c", "size_t", "image_viewer_setting", "attribute", "representation_of_uuid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImageRepresentation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of model
        if self.model:
            _dict['model'] = self.model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in image_viewer_setting (list)
        _items = []
        if self.image_viewer_setting:
            for _item_image_viewer_setting in self.image_viewer_setting:
                if _item_image_viewer_setting:
                    _items.append(_item_image_viewer_setting.to_dict())
            _dict['image_viewer_setting'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attribute (list)
        _items = []
        if self.attribute:
            for _item_attribute in self.attribute:
                if _item_attribute:
                    _items.append(_item_attribute.to_dict())
            _dict['attribute'] = _items
        # set to None if model (nullable) is None
        # and model_fields_set contains the field
        if self.model is None and "model" in self.model_fields_set:
            _dict['model'] = None

        # set to None if physical_size_x (nullable) is None
        # and model_fields_set contains the field
        if self.physical_size_x is None and "physical_size_x" in self.model_fields_set:
            _dict['physical_size_x'] = None

        # set to None if physical_size_y (nullable) is None
        # and model_fields_set contains the field
        if self.physical_size_y is None and "physical_size_y" in self.model_fields_set:
            _dict['physical_size_y'] = None

        # set to None if physical_size_z (nullable) is None
        # and model_fields_set contains the field
        if self.physical_size_z is None and "physical_size_z" in self.model_fields_set:
            _dict['physical_size_z'] = None

        # set to None if size_x (nullable) is None
        # and model_fields_set contains the field
        if self.size_x is None and "size_x" in self.model_fields_set:
            _dict['size_x'] = None

        # set to None if size_y (nullable) is None
        # and model_fields_set contains the field
        if self.size_y is None and "size_y" in self.model_fields_set:
            _dict['size_y'] = None

        # set to None if size_z (nullable) is None
        # and model_fields_set contains the field
        if self.size_z is None and "size_z" in self.model_fields_set:
            _dict['size_z'] = None

        # set to None if size_c (nullable) is None
        # and model_fields_set contains the field
        if self.size_c is None and "size_c" in self.model_fields_set:
            _dict['size_c'] = None

        # set to None if size_t (nullable) is None
        # and model_fields_set contains the field
        if self.size_t is None and "size_t" in self.model_fields_set:
            _dict['size_t'] = None

        # set to None if image_viewer_setting (nullable) is None
        # and model_fields_set contains the field
        if self.image_viewer_setting is None and "image_viewer_setting" in self.model_fields_set:
            _dict['image_viewer_setting'] = None

        # set to None if attribute (nullable) is None
        # and model_fields_set contains the field
        if self.attribute is None and "attribute" in self.model_fields_set:
            _dict['attribute'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImageRepresentation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "version": obj.get("version"),
            "model": ModelMetadata.from_dict(obj["model"]) if obj.get("model") is not None else None,
            "image_format": obj.get("image_format"),
            "use_type": obj.get("use_type"),
            "file_uri": obj.get("file_uri"),
            "total_size_in_bytes": obj.get("total_size_in_bytes"),
            "physical_size_x": obj.get("physical_size_x"),
            "physical_size_y": obj.get("physical_size_y"),
            "physical_size_z": obj.get("physical_size_z"),
            "size_x": obj.get("size_x"),
            "size_y": obj.get("size_y"),
            "size_z": obj.get("size_z"),
            "size_c": obj.get("size_c"),
            "size_t": obj.get("size_t"),
            "image_viewer_setting": [RenderedView.from_dict(_item) for _item in obj["image_viewer_setting"]] if obj.get("image_viewer_setting") is not None else None,
            "attribute": [Attribute.from_dict(_item) for _item in obj["attribute"]] if obj.get("attribute") is not None else None,
            "representation_of_uuid": obj.get("representation_of_uuid")
        })
        return _obj


