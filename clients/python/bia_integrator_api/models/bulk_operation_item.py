# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field

class BulkOperationItem(BaseModel):
    """
    BulkOperationItem
    """
    status: Optional[Any] = Field(...)
    idx_in_request: Optional[Any] = Field(...)
    message: Optional[Any] = Field(...)
    __properties = ["status", "idx_in_request", "message"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BulkOperationItem:
        """Create an instance of BulkOperationItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if status (nullable) is None
        # and __fields_set__ contains the field
        if self.status is None and "status" in self.__fields_set__:
            _dict['status'] = None

        # set to None if idx_in_request (nullable) is None
        # and __fields_set__ contains the field
        if self.idx_in_request is None and "idx_in_request" in self.__fields_set__:
            _dict['idx_in_request'] = None

        # set to None if message (nullable) is None
        # and __fields_set__ contains the field
        if self.message is None and "message" in self.__fields_set__:
            _dict['message'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BulkOperationItem:
        """Create an instance of BulkOperationItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BulkOperationItem.parse_obj(obj)

        _obj = BulkOperationItem.parse_obj({
            "status": obj.get("status"),
            "idx_in_request": obj.get("idx_in_request"),
            "message": obj.get("message")
        })
        return _obj


