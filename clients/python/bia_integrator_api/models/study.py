# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from bia_integrator_api.models.attribute import Attribute
from bia_integrator_api.models.contributor import Contributor
from bia_integrator_api.models.external_reference import ExternalReference
from bia_integrator_api.models.grant import Grant
from bia_integrator_api.models.licence import Licence
from bia_integrator_api.models.model_metadata import ModelMetadata
from bia_integrator_api.models.provenance import Provenance
from bia_integrator_api.models.publication import Publication
from typing import Optional, Set
from typing_extensions import Self

class Study(BaseModel):
    """
    Study
    """ # noqa: E501
    object_creator: Provenance
    uuid: StrictStr = Field(description="Unique ID (across the BIA database) used to refer to and identify a document.")
    version: Annotated[int, Field(strict=True, ge=0)] = Field(description="Document version. This can't be optional to make sure we never persist objects without it")
    model: Optional[ModelMetadata] = None
    additional_metadata: Optional[List[Attribute]] = Field(default=None, description="Freeform key-value pairs that don't otherwise fit our data model, potentially from user provided metadata, BIA curation, and experimental fields.")
    accession_id: StrictStr = Field(description="Unique ID provided by BioStudies.")
    licence: Licence
    author: Annotated[List[Contributor], Field(min_length=1)]
    title: StrictStr = Field(description="The title of a study. This will usually be displayed when search results including your data are shown.")
    release_date: date = Field(description="Date of first publication")
    description: StrictStr = Field(description="Brief description of the study.")
    keyword: Optional[List[StrictStr]] = Field(default=None, description="Keywords or tags used to describe the subject or context of the study.")
    acknowledgement: Optional[StrictStr] = None
    see_also: Optional[List[ExternalReference]] = Field(default=None, description="Links to publications, github repositories, and other pages related to this Study.")
    related_publication: Optional[List[Publication]] = Field(default=None, description="The publications that the work involved in the study contributed to.")
    grant: Optional[List[Grant]] = Field(default=None, description="The grants that funded the study.")
    funding_statement: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["object_creator", "uuid", "version", "model", "additional_metadata", "accession_id", "licence", "author", "title", "release_date", "description", "keyword", "acknowledgement", "see_also", "related_publication", "grant", "funding_statement"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Study from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of model
        if self.model:
            _dict['model'] = self.model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in additional_metadata (list)
        _items = []
        if self.additional_metadata:
            for _item_additional_metadata in self.additional_metadata:
                if _item_additional_metadata:
                    _items.append(_item_additional_metadata.to_dict())
            _dict['additional_metadata'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in author (list)
        _items = []
        if self.author:
            for _item_author in self.author:
                if _item_author:
                    _items.append(_item_author.to_dict())
            _dict['author'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in see_also (list)
        _items = []
        if self.see_also:
            for _item_see_also in self.see_also:
                if _item_see_also:
                    _items.append(_item_see_also.to_dict())
            _dict['see_also'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in related_publication (list)
        _items = []
        if self.related_publication:
            for _item_related_publication in self.related_publication:
                if _item_related_publication:
                    _items.append(_item_related_publication.to_dict())
            _dict['related_publication'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in grant (list)
        _items = []
        if self.grant:
            for _item_grant in self.grant:
                if _item_grant:
                    _items.append(_item_grant.to_dict())
            _dict['grant'] = _items
        # set to None if model (nullable) is None
        # and model_fields_set contains the field
        if self.model is None and "model" in self.model_fields_set:
            _dict['model'] = None

        # set to None if acknowledgement (nullable) is None
        # and model_fields_set contains the field
        if self.acknowledgement is None and "acknowledgement" in self.model_fields_set:
            _dict['acknowledgement'] = None

        # set to None if funding_statement (nullable) is None
        # and model_fields_set contains the field
        if self.funding_statement is None and "funding_statement" in self.model_fields_set:
            _dict['funding_statement'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Study from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "object_creator": obj.get("object_creator"),
            "uuid": obj.get("uuid"),
            "version": obj.get("version"),
            "model": ModelMetadata.from_dict(obj["model"]) if obj.get("model") is not None else None,
            "additional_metadata": [Attribute.from_dict(_item) for _item in obj["additional_metadata"]] if obj.get("additional_metadata") is not None else None,
            "accession_id": obj.get("accession_id"),
            "licence": obj.get("licence"),
            "author": [Contributor.from_dict(_item) for _item in obj["author"]] if obj.get("author") is not None else None,
            "title": obj.get("title"),
            "release_date": obj.get("release_date"),
            "description": obj.get("description"),
            "keyword": obj.get("keyword"),
            "acknowledgement": obj.get("acknowledgement"),
            "see_also": [ExternalReference.from_dict(_item) for _item in obj["see_also"]] if obj.get("see_also") is not None else None,
            "related_publication": [Publication.from_dict(_item) for _item in obj["related_publication"]] if obj.get("related_publication") is not None else None,
            "grant": [Grant.from_dict(_item) for _item in obj["grant"]] if obj.get("grant") is not None else None,
            "funding_statement": obj.get("funding_statement")
        })
        return _obj


