# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from bia_integrator_api.models.model_metadata import ModelMetadata
from typing import Optional, Set
from typing_extensions import Self

class ImageAcquisitionProtocol(BaseModel):
    """
    ImageAcquisitionProtocol
    """ # noqa: E501
    title_id: StrictStr = Field(description="User provided title, which is unqiue within a submission, used to identify a part of a submission.")
    uuid: StrictStr = Field(description="Unique ID (across the BIA database) used to refer to and identify a document.")
    version: Annotated[int, Field(strict=True, ge=0)] = Field(description="Document version. This can't be optional to make sure we never persist objects without it")
    model: Optional[ModelMetadata] = None
    protocol_description: StrictStr = Field(description="Description of actions involved in the process.")
    imaging_instrument_description: StrictStr = Field(description="Names, types, or description of how the instruments used to create the image.")
    fbbi_id: Optional[List[StrictStr]] = None
    imaging_method_name: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["title_id", "uuid", "version", "model", "protocol_description", "imaging_instrument_description", "fbbi_id", "imaging_method_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImageAcquisitionProtocol from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of model
        if self.model:
            _dict['model'] = self.model.to_dict()
        # set to None if model (nullable) is None
        # and model_fields_set contains the field
        if self.model is None and "model" in self.model_fields_set:
            _dict['model'] = None

        # set to None if fbbi_id (nullable) is None
        # and model_fields_set contains the field
        if self.fbbi_id is None and "fbbi_id" in self.model_fields_set:
            _dict['fbbi_id'] = None

        # set to None if imaging_method_name (nullable) is None
        # and model_fields_set contains the field
        if self.imaging_method_name is None and "imaging_method_name" in self.model_fields_set:
            _dict['imaging_method_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImageAcquisitionProtocol from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title_id": obj.get("title_id"),
            "uuid": obj.get("uuid"),
            "version": obj.get("version"),
            "model": ModelMetadata.from_dict(obj["model"]) if obj.get("model") is not None else None,
            "protocol_description": obj.get("protocol_description"),
            "imaging_instrument_description": obj.get("imaging_instrument_description"),
            "fbbi_id": obj.get("fbbi_id"),
            "imaging_method_name": obj.get("imaging_method_name")
        })
        return _obj


