# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from bia_integrator_api.models.attribute import Attribute
from typing import Optional, Set
from typing_extensions import Self

class Channel(BaseModel):
    """
    An image channel.
    """ # noqa: E501
    additional_metadata: Optional[List[Attribute]] = Field(default=None, description="Freeform key-value pairs that don't otherwise fit our data model, potentially from user provided metadata, BIA curation, and experimental fields.")
    colormap_start: Union[StrictFloat, StrictInt] = Field(description="Start value of colormap")
    colormap_end: Union[StrictFloat, StrictInt] = Field(description="End value of colormap")
    scale_factor: Optional[Union[StrictFloat, StrictInt]] = None
    label: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["additional_metadata", "colormap_start", "colormap_end", "scale_factor", "label"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Channel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_metadata (list)
        _items = []
        if self.additional_metadata:
            for _item_additional_metadata in self.additional_metadata:
                if _item_additional_metadata:
                    _items.append(_item_additional_metadata.to_dict())
            _dict['additional_metadata'] = _items
        # set to None if scale_factor (nullable) is None
        # and model_fields_set contains the field
        if self.scale_factor is None and "scale_factor" in self.model_fields_set:
            _dict['scale_factor'] = None

        # set to None if label (nullable) is None
        # and model_fields_set contains the field
        if self.label is None and "label" in self.model_fields_set:
            _dict['label'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Channel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additional_metadata": [Attribute.from_dict(_item) for _item in obj["additional_metadata"]] if obj.get("additional_metadata") is not None else None,
            "colormap_start": obj.get("colormap_start"),
            "colormap_end": obj.get("colormap_end"),
            "scale_factor": obj.get("scale_factor"),
            "label": obj.get("label")
        })
        return _obj


