# coding: utf-8

"""
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from bia_integrator_api.models.attribute import Attribute
from bia_integrator_api.models.model_metadata import ModelMetadata
from bia_integrator_api.models.provenance import Provenance
from bia_integrator_api.models.taxon import Taxon
from typing import Set
from typing_extensions import Self


class BioSample(BaseModel):
    """
    BioSample
    """  # noqa: E501

    object_creator: Provenance
    uuid: StrictStr = Field(
        description="Unique ID (across the BIA database) used to refer to and identify a document."
    )
    version: Annotated[int, Field(strict=True, ge=0)] = Field(
        description="Document version. This can't be optional to make sure we never persist objects without it"
    )
    model: Optional[ModelMetadata] = None
    additional_metadata: Optional[List[Attribute]] = Field(
        default=None,
        description="Freeform key-value pairs that don't otherwise fit our data model, potentially from user provided metadata, BIA curation, and experimental fields.",
    )
    title: StrictStr = Field(description="The title of a bio-sample.")
    organism_classification: List[Taxon] = Field(
        description="The classification of th ebiological matter."
    )
    biological_entity_description: StrictStr = Field(
        description="A short description of the biological entity."
    )
    experimental_variable_description: Optional[List[StrictStr]] = Field(
        default=None,
        description="What is intentionally varied (e.g. time) between multiple entries in this study component",
    )
    extrinsic_variable_description: Optional[List[StrictStr]] = Field(
        default=None, description="External treatment (e.g. reagent)."
    )
    intrinsic_variable_description: Optional[List[StrictStr]] = Field(
        default=None, description="Intrinsic (e.g. genetic) alteration."
    )
    growth_protocol_uuid: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "object_creator",
        "uuid",
        "version",
        "model",
        "additional_metadata",
        "title",
        "organism_classification",
        "biological_entity_description",
        "experimental_variable_description",
        "extrinsic_variable_description",
        "intrinsic_variable_description",
        "growth_protocol_uuid",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BioSample from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of model
        if self.model:
            _dict["model"] = self.model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in additional_metadata (list)
        _items = []
        if self.additional_metadata:
            for _item_additional_metadata in self.additional_metadata:
                if _item_additional_metadata:
                    _items.append(_item_additional_metadata.to_dict())
            _dict["additional_metadata"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in organism_classification (list)
        _items = []
        if self.organism_classification:
            for _item_organism_classification in self.organism_classification:
                if _item_organism_classification:
                    _items.append(_item_organism_classification.to_dict())
            _dict["organism_classification"] = _items
        # set to None if model (nullable) is None
        # and model_fields_set contains the field
        if self.model is None and "model" in self.model_fields_set:
            _dict["model"] = None

        # set to None if growth_protocol_uuid (nullable) is None
        # and model_fields_set contains the field
        if (
            self.growth_protocol_uuid is None
            and "growth_protocol_uuid" in self.model_fields_set
        ):
            _dict["growth_protocol_uuid"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BioSample from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "object_creator": obj.get("object_creator"),
                "uuid": obj.get("uuid"),
                "version": obj.get("version"),
                "model": ModelMetadata.from_dict(obj["model"])
                if obj.get("model") is not None
                else None,
                "additional_metadata": [
                    Attribute.from_dict(_item) for _item in obj["additional_metadata"]
                ]
                if obj.get("additional_metadata") is not None
                else None,
                "title": obj.get("title"),
                "organism_classification": [
                    Taxon.from_dict(_item) for _item in obj["organism_classification"]
                ]
                if obj.get("organism_classification") is not None
                else None,
                "biological_entity_description": obj.get(
                    "biological_entity_description"
                ),
                "experimental_variable_description": obj.get(
                    "experimental_variable_description"
                ),
                "extrinsic_variable_description": obj.get(
                    "extrinsic_variable_description"
                ),
                "intrinsic_variable_description": obj.get(
                    "intrinsic_variable_description"
                ),
                "growth_protocol_uuid": obj.get("growth_protocol_uuid"),
            }
        )
        return _obj
