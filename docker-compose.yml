services:
  biaint-mongo:
    image: mongo:6.0
    restart: no
    env_file: api/.env_compose
    ports:
      - 27017:27017
    expose:
      - 27017
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 1s
      timeout: 1s
      retries: 5
  biaint-elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
    environment:
      - discovery.type=single-node
      - ELASTIC_PASSWORD=test
      - xpack.security.enabled=true 
      - xpack.security.authc.api_key.enabled=true
      - xpack.license.self_generated.type=basic
      - http.cors.allow-origin=http://localhost:1358,http://127.0.0.1:1358
      - http.cors.enabled=true
      - http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization
      - http.cors.allow-credentials=true
    ports:
      - 9200:9200
    healthcheck:
      test: ["CMD", "curl", "-u", "elastic:test", "-f", "http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=30s"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    profiles:
      - search
      - codegen_search

  dejavu:
    image: appbaseio/dejavu:3.6.0
    ports:
      - "1358:1358"
    environment:
      - ELASTICSEARCH_URL=http://elastic:test@localhost:9200
      - ELASTICSEARCH_INDEX=test-index
    depends_on:
      biaint-elastic:
        condition: service_healthy
    profiles:
      - search
  bia-integrator-api:
    build:
      context: .
      dockerfile: api/Dockerfile
    image: bia-integrator-api
    env_file: api/.env_compose
    container_name: api
    hostname: api
    ports:
      - 8080:8080
    expose:
      - 8080
    depends_on:
      biaint-mongo:
        condition: service_healthy
    healthcheck:
      # !! important to sync services
      test: ["CMD", "wget", "-O", "-", "api:8080/openapi.json"]
      interval: 1s
      timeout: 10s
      retries: 10
  client-refresh:
    depends_on:
      bia-integrator-api:
        condition: service_healthy
    container_name: openapi-generator
    user: ${MY_UID}
    image: openapitools/openapi-generator-cli:v7.8.0
    # docker-entrypoint.sh does argument parsing in the entrypoint and only picks up the bash command
    #   so re-run after pulling openapi.json to have the right env setup
    command: bash -c "wget -q -O - api:8080/openapi.json > openapi.json && docker-entrypoint.sh generate --config openapi_config_python.yml -i openapi.json -g python -o python"
    working_dir: /mnt/share
    volumes:
      - ./clients:/mnt/share
    profiles:
      - codegen
 
  client-examples:
    depends_on:
      bia-integrator-api:
        condition: service_healthy
    container_name: client_examples
    # reusing integrator package for consistent python version & preinstalled poetry 
    image: bia-integrator-api
    command: bash -c "poetry --version && poetry lock && poetry install && poetry run python private_api.py && poetry run python public.py"
    working_dir: /mnt/share/example
    volumes:
      - ./clients/python:/mnt/share
    profiles:
      - client_examples
  bia-integrator-search:
    build:
      context: .
      dockerfile: bia-search/Dockerfile
    image: bia-integrator-search
    env_file: bia-search/.env_compose
    container_name: bia-search
    hostname: bia-search
    ports:
      - 8081:8080
    expose:
      - 8080
    depends_on:
      biaint-elastic:
        condition: service_healthy
    profiles:
      - codegen_search
      - search
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "bia-search:8080/openapi.json"]
      interval: 1s
      timeout: 10s
      retries: 10
  client-search-refresh:
    depends_on:
      bia-integrator-search:
        condition: service_healthy
    container_name: openapi-generator-search
    user: ${MY_UID}
    image: openapitools/openapi-generator-cli:v7.8.0
    # docker-entrypoint.sh does argument parsing in the entrypoint and only picks up the bash command
    #   so re-run after pulling openapi.json to have the right env setup
    command: bash -c "wget -q -O - bia-search:8080/openapi.json > openapi.json && docker-entrypoint.sh generate -i openapi.json -g typescript-fetch -o typescript --config openapi_config_ts.yml"
    working_dir: /mnt/share
    volumes:
      - ./clients/search:/mnt/share
    profiles:
      - codegen_search
